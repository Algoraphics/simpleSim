/* Auto-generated by genmsg_cpp for file /home/ethan/catvehicle2013/trunk/ROS2JAUS/simpleSim/beginner_tutorials/msg/wrenchData.msg */
#ifndef BEGINNER_TUTORIALS_MESSAGE_WRENCHDATA_H
#define BEGINNER_TUTORIALS_MESSAGE_WRENCHDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct wrenchData_ {
  typedef wrenchData_<ContainerAllocator> Type;

  wrenchData_()
  : throttle(0.0)
  , brake(0.0)
  , steering(0.0)
  , gear(0)
  {
  }

  wrenchData_(const ContainerAllocator& _alloc)
  : throttle(0.0)
  , brake(0.0)
  , steering(0.0)
  , gear(0)
  {
  }

  typedef double _throttle_type;
  double throttle;

  typedef double _brake_type;
  double brake;

  typedef double _steering_type;
  double steering;

  typedef int32_t _gear_type;
  int32_t gear;


  typedef boost::shared_ptr< ::beginner_tutorials::wrenchData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::wrenchData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct wrenchData
typedef  ::beginner_tutorials::wrenchData_<std::allocator<void> > wrenchData;

typedef boost::shared_ptr< ::beginner_tutorials::wrenchData> wrenchDataPtr;
typedef boost::shared_ptr< ::beginner_tutorials::wrenchData const> wrenchDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::beginner_tutorials::wrenchData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::beginner_tutorials::wrenchData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::wrenchData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::wrenchData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::wrenchData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7319bfcf5b833496bf57feda1ad86f3a";
  }

  static const char* value(const  ::beginner_tutorials::wrenchData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7319bfcf5b833496ULL;
  static const uint64_t static_value2 = 0xbf57feda1ad86f3aULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::wrenchData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/wrenchData";
  }

  static const char* value(const  ::beginner_tutorials::wrenchData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::wrenchData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 throttle\n\
float64 brake\n\
float64 steering\n\
int32 gear\n\
\n\
";
  }

  static const char* value(const  ::beginner_tutorials::wrenchData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::beginner_tutorials::wrenchData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::wrenchData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.throttle);
    stream.next(m.brake);
    stream.next(m.steering);
    stream.next(m.gear);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct wrenchData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::wrenchData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::beginner_tutorials::wrenchData_<ContainerAllocator> & v) 
  {
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "brake: ";
    Printer<double>::stream(s, indent + "  ", v.brake);
    s << indent << "steering: ";
    Printer<double>::stream(s, indent + "  ", v.steering);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_WRENCHDATA_H

