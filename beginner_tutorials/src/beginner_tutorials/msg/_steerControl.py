"""autogenerated by genpy from beginner_tutorials/steerControl.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class steerControl(genpy.Message):
  _md5sum = "940e893d2a349da1b2a1137d1e1dfcf3"
  _type = "beginner_tutorials/steerControl"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 omega
float64 delta_d
int32 path_index
float64 x
float64 y
float64 velocity
float64 heading
float64 tire_angle
float64 path_x
float64 path_y
int32 flag

"""
  __slots__ = ['omega','delta_d','path_index','x','y','velocity','heading','tire_angle','path_x','path_y','flag']
  _slot_types = ['float64','float64','int32','float64','float64','float64','float64','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       omega,delta_d,path_index,x,y,velocity,heading,tire_angle,path_x,path_y,flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(steerControl, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.omega is None:
        self.omega = 0.
      if self.delta_d is None:
        self.delta_d = 0.
      if self.path_index is None:
        self.path_index = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.heading is None:
        self.heading = 0.
      if self.tire_angle is None:
        self.tire_angle = 0.
      if self.path_x is None:
        self.path_x = 0.
      if self.path_y is None:
        self.path_y = 0.
      if self.flag is None:
        self.flag = 0
    else:
      self.omega = 0.
      self.delta_d = 0.
      self.path_index = 0
      self.x = 0.
      self.y = 0.
      self.velocity = 0.
      self.heading = 0.
      self.tire_angle = 0.
      self.path_x = 0.
      self.path_y = 0.
      self.flag = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2di7di.pack(_x.omega, _x.delta_d, _x.path_index, _x.x, _x.y, _x.velocity, _x.heading, _x.tire_angle, _x.path_x, _x.path_y, _x.flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.omega, _x.delta_d, _x.path_index, _x.x, _x.y, _x.velocity, _x.heading, _x.tire_angle, _x.path_x, _x.path_y, _x.flag,) = _struct_2di7di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2di7di.pack(_x.omega, _x.delta_d, _x.path_index, _x.x, _x.y, _x.velocity, _x.heading, _x.tire_angle, _x.path_x, _x.path_y, _x.flag))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 80
      (_x.omega, _x.delta_d, _x.path_index, _x.x, _x.y, _x.velocity, _x.heading, _x.tire_angle, _x.path_x, _x.path_y, _x.flag,) = _struct_2di7di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2di7di = struct.Struct("<2di7di")
