/* Auto-generated by genmsg_cpp for file /home/ethan/catvehicle2013/trunk/ROSS2JAUS/simpleSim/beginner_tutorials/srv/savePath.srv */
#ifndef BEGINNER_TUTORIALS_SERVICE_SAVEPATH_H
#define BEGINNER_TUTORIALS_SERVICE_SAVEPATH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Float64MultiArray.h"



namespace beginner_tutorials
{
template <class ContainerAllocator>
struct savePathRequest_ {
  typedef savePathRequest_<ContainerAllocator> Type;

  savePathRequest_()
  : path()
  {
  }

  savePathRequest_(const ContainerAllocator& _alloc)
  : path(_alloc)
  {
  }

  typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _path_type;
   ::std_msgs::Float64MultiArray_<ContainerAllocator>  path;


  typedef boost::shared_ptr< ::beginner_tutorials::savePathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::savePathRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct savePathRequest
typedef  ::beginner_tutorials::savePathRequest_<std::allocator<void> > savePathRequest;

typedef boost::shared_ptr< ::beginner_tutorials::savePathRequest> savePathRequestPtr;
typedef boost::shared_ptr< ::beginner_tutorials::savePathRequest const> savePathRequestConstPtr;


template <class ContainerAllocator>
struct savePathResponse_ {
  typedef savePathResponse_<ContainerAllocator> Type;

  savePathResponse_()
  : check(false)
  {
  }

  savePathResponse_(const ContainerAllocator& _alloc)
  : check(false)
  {
  }

  typedef uint8_t _check_type;
  uint8_t check;


  typedef boost::shared_ptr< ::beginner_tutorials::savePathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::savePathResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct savePathResponse
typedef  ::beginner_tutorials::savePathResponse_<std::allocator<void> > savePathResponse;

typedef boost::shared_ptr< ::beginner_tutorials::savePathResponse> savePathResponsePtr;
typedef boost::shared_ptr< ::beginner_tutorials::savePathResponse const> savePathResponseConstPtr;

struct savePath
{

typedef savePathRequest Request;
typedef savePathResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct savePath
} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::savePathRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::savePathRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::savePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "78dfa1c060c98a50c5715bcddd7d7a38";
  }

  static const char* value(const  ::beginner_tutorials::savePathRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x78dfa1c060c98a50ULL;
  static const uint64_t static_value2 = 0xc5715bcddd7d7a38ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::savePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/savePathRequest";
  }

  static const char* value(const  ::beginner_tutorials::savePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::savePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Float64MultiArray path\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float64[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const  ::beginner_tutorials::savePathRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::savePathResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::savePathResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::savePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c5df00fea9d1f39520fa0345cbde1b26";
  }

  static const char* value(const  ::beginner_tutorials::savePathResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc5df00fea9d1f395ULL;
  static const uint64_t static_value2 = 0x20fa0345cbde1b26ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::savePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/savePathResponse";
  }

  static const char* value(const  ::beginner_tutorials::savePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::savePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool check\n\
\n\
\n\
";
  }

  static const char* value(const  ::beginner_tutorials::savePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::beginner_tutorials::savePathResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::savePathRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.path);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct savePathRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::savePathResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.check);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct savePathResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<beginner_tutorials::savePath> {
  static const char* value() 
  {
    return "f0fdf9eae92968e079b5e8718b5d25ac";
  }

  static const char* value(const beginner_tutorials::savePath&) { return value(); } 
};

template<>
struct DataType<beginner_tutorials::savePath> {
  static const char* value() 
  {
    return "beginner_tutorials/savePath";
  }

  static const char* value(const beginner_tutorials::savePath&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<beginner_tutorials::savePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f0fdf9eae92968e079b5e8718b5d25ac";
  }

  static const char* value(const beginner_tutorials::savePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<beginner_tutorials::savePathRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/savePath";
  }

  static const char* value(const beginner_tutorials::savePathRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<beginner_tutorials::savePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f0fdf9eae92968e079b5e8718b5d25ac";
  }

  static const char* value(const beginner_tutorials::savePathResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<beginner_tutorials::savePathResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/savePath";
  }

  static const char* value(const beginner_tutorials::savePathResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BEGINNER_TUTORIALS_SERVICE_SAVEPATH_H

